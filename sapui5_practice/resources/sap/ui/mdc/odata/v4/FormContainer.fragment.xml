<!--
/**
 * OData v4 FormContainer
 * mandatory parameters:
 * @param metadataContext:entitySet mandatory context to the EntitySet.
 * optional parameters:
 * @param metadataContext:dataFieldCollection context to a collection of com.sap.vocabularies.UI.v1.DataFieldAbstract or a com.sap.vocabularies.UI.v1.DataPoint.
 * @param [id] of the form container.
 * @param [idPrefix] prefix that needs to be used for the 'Ids' of underlying or child macro controls in the form.
 * @param [title] title for the form container that is to be rendered.
 * @param [editMode] edit mode of the fields in the form container(Display,Editable,ReadOnly,Disabled) / Default: Display.
 * @param [navigationPath] for binding the form container using a navigation path.
 * @param [visibilityPath] for binding the visibility of the form container using a propertyPath.
 */
-->

<core:FragmentDefinition xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1" xmlns="sap.m"
	xmlns:f="sap.ui.layout.form"
	xmlns:mdc="sap.ui.mdc"
	xmlns:macro="sap.ui.mdc.odata.v4"
	xmlns:core="sap.ui.core"
	xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	template:require="{
		MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
		ID: 'sap/ui/mdc/odata/v4/StableIdHelper',
		COMMON: 'sap/ui/mdc/odata/v4/CommonHelper',
		FORM: 'sap/ui/mdc/odata/v4/form/FormHelper'
	}">

		<f:FormContainer
			id="{= ${this>id} || undefined}"
			title="{this>title}"
			binding="{= ${this>navigationPath} ? ('{ path : \'' + ${this>navigationPath} + '\' }') : ''}"
			visible="{= ${this>visibilityPath} ? ('{= !${' + ${this>visibilityPath} + '} }') : true }">
			<f:dependents>
				<!-- Create the value help dialogs for fields inside form container -->
				<template:repeat list="{path:'dataFieldCollection>'}" var="dataField">
					<!-- <template:if test="{= ${dataField>$Type} !== 'com.sap.vocabularies.UI.v1.DataFieldForAction' &amp;&amp; !${formElements>Target}}"> -->
					<template:with path="dataField>Value" var="item">
						<macro:ValueHelp idPrefix="{= COMMON.getStableId([${this>id}, 'FormVH']) }" metadataContexts="{model: 'entitySet', path:'',  name: 'entitySet'},{model: 'item', path:'',  name: 'property'}"	/>
					</template:with>
					<!-- </template:if> -->
				</template:repeat>
			</f:dependents>
			<f:formElements>
				<template:with path="dataFieldCollection>" var="formElements">
					<template:if test="{= ${formElements>./@sapui.name}.indexOf('com.sap.vocabularies.UI.v1.DataPoint') > -1 }">
						<template:then>
							<f:FormElement
								id="{= COMMON.getStableId([${this>id}, ${formElements>Value/$Path@@.MODEL.value}, 'FormE']) }"
								label="{formElements>Title@@MODEL.value}">
								<f:fields>
									<macro:Field
										idPrefix="{= COMMON.getStableId([${this>id}, 'FormF']) }"
										vhIdPrefix="{= COMMON.getStableId([${this>id}, 'FormVH']) }"
										metadataContexts="{ model: 'entitySet', path:'',  name: 'entitySet'},{ model: 'formElements', path:'',  name: 'dataField'}"
										editMode="{= ${this>editMode} || 'Display'}"
										parentControl="Form" />
								</f:fields>
							</f:FormElement>
						</template:then>
						<template:else>
							<template:repeat list="{formElements>}" var="dataField">
								<template:if test="{= ${dataField>$Type} !== 'com.sap.vocabularies.UI.v1.DataFieldForAction'}">
									<template:then>
										<template:if test="{= !(${dataField>./@com.sap.vocabularies.UI.v1.Hidden} === true)}">
											<f:FormElement label="{dataField>@@.MODEL.label}"
												visible="{= !${dataField>./@com.sap.vocabularies.UI.v1.Hidden@@MODEL.value} }"
												id="{= COMMON.getStableId([${this>id}, ${dataField>Value/$Path@@.MODEL.value}, 'FormE']) }">
												<f:fields>
													<macro:Field editMode="{= ${this>editMode} ? ${this>editMode} : 'Display'}"
														idPrefix="{= COMMON.getStableId([${this>id}, 'FormF']) }"
														vhIdPrefix="{= COMMON.getStableId([${this>id}, 'FormVH']) }"
														metadataContexts="{ model: 'entitySet', path:'',  name: 'entitySet'},{ model: 'dataField', path:'',  name: 'dataField'}"
														onCallAction="{= ${this>onCallAction} ? ${this>onCallAction} : null}"
														parentControl="Form" />
												</f:fields>
											</f:FormElement>
										</template:if>	
									</template:then>
								</template:if>
							</template:repeat>
						</template:else>
					</template:if>
				</template:with>
			</f:formElements>
		</f:FormContainer>

</core:FragmentDefinition>
